name: Comment on PR

on:
  workflow_run:
    workflows: [Validate item data]
    types:
      - completed
    branches-ignore:
      - master

permissions:
  pull-requests: write

jobs:
  release:
    runs-on: "ubuntu-latest"

    steps:
      - name: Download pr comment artifacts
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            let fs = require('fs');

            // download pr comment artifact
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr-comment"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr-comment.zip`, Buffer.from(download.data));

            // download pr numeber artifact
            matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr-number"
            })[0];
            download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr-number.zip`, Buffer.from(download.data));

      - name: Unzip artifacts
        id: unzip-artifacts
        run: |
          unzip pr-comment.zip
          unzip pr-number.zip

      - uses: actions/github-script@v7
        if: ${{ steps.unzip-artifacts.outcome == 'success'}}
        with:
          script: |
            let fs = require('fs');
            let commentFileContents = fs.readFileSync('github-pr-comment.txt').toString();
            let prNumber = parseInt(fs.readFileSync('pr-number.txt').toString(), 10);

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentFileContents
            });
